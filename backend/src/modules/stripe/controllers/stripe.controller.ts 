// src/modules/stripe/controllers/stripe.controller.ts
import { Controller, Post, Body, Headers, RawBodyRequest, Req, Logger, HttpCode, HttpStatus } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiExcludeEndpoint } from '@nestjs/swagger';
import { Request } from 'express';
import { StripeService } from '../stripe.service';
import { Public } from '../../auth/decorators/public.decorator';

@ApiTags('stripe')
@Controller('webhooks/stripe')
export class StripeController {
  private readonly logger = new Logger(StripeController.name);

  constructor(private readonly stripeService: StripeService) {}

  /**
   * 🎯 Webhook principal de Stripe para pagos regulares
   * Maneja: payment_intent.succeeded, payment_intent.payment_failed, checkout.session.completed
   */
  @Public()
  @Post()
  @HttpCode(HttpStatus.OK)
  @ApiExcludeEndpoint() // No mostrar en docs públicos por seguridad
  async handleStripeWebhook(
    @Req() request: RawBodyRequest<Request>,
    @Headers('stripe-signature') signature: string,
  ) {
    this.logger.log('Received Stripe webhook');

    try {
      // Verificar la firma del webhook
      const event = this.stripeService.verifyWebhookSignature(
        request.rawBody,
        signature,
      );

      this.logger.log(`Processing webhook event: ${event.type}`);

      // Procesar diferentes tipos de eventos
      switch (event.type) {
        case 'payment_intent.succeeded':
          await this.handlePaymentIntentSucceeded(event);
          break;

        case 'payment_intent.payment_failed':
          await this.handlePaymentIntentFailed(event);
          break;

        case 'checkout.session.completed':
          await this.handleCheckoutSessionCompleted(event);
          break;

        case 'payment_intent.canceled':
          await this.handlePaymentIntentCanceled(event);
          break;

        default:
          this.logger.warn(`Unhandled webhook event type: ${event.type}`);
      }

      return { received: true };
    } catch (error) {
      this.logger.error(`Webhook error: ${error.message}`, error.stack);
      throw error;
    }
  }

  /**
   * Procesar pago exitoso
   */
  private async handlePaymentIntentSucceeded(event: any) {
    const paymentIntent = event.data.object;
    this.logger.log(`Payment succeeded: ${paymentIntent.id}`);

    // TODO: Implementar lógica de negocio
    // - Actualizar estado de orden a PAID
    // - Crear registros de transacción
    // - Enviar notificaciones
    // - Generar tokens de descarga

    // Por ahora solo logueamos
    this.logger.log(`Payment Intent ${paymentIntent.id} succeeded for amount ${paymentIntent.amount}`);
  }

  /**
   * Procesar pago fallido
   */
  private async handlePaymentIntentFailed(event: any) {
    const paymentIntent = event.data.object;
    this.logger.warn(`Payment failed: ${paymentIntent.id}`);

    // TODO: Implementar lógica de negocio
    // - Marcar orden como fallida
    // - Enviar notificación de error
    // - Limpiar carrito si es necesario

    this.logger.warn(`Payment Intent ${paymentIntent.id} failed: ${paymentIntent.last_payment_error?.message || 'Unknown error'}`);
  }

  /**
   * Procesar checkout session completada
   */
  private async handleCheckoutSessionCompleted(event: any) {
    const session = event.data.object;
    this.logger.log(`Checkout session completed: ${session.id}`);

    // TODO: Implementar lógica de negocio
    // - Verificar pago
    // - Confirmar orden
    // - Iniciar proceso de entrega

    this.logger.log(`Checkout session ${session.id} completed for customer ${session.customer_email}`);
  }

  /**
   * Procesar pago cancelado
   */
  private async handlePaymentIntentCanceled(event: any) {
    const paymentIntent = event.data.object;
    this.logger.log(`Payment canceled: ${paymentIntent.id}`);

    // TODO: Implementar lógica de negocio
    // - Restaurar carrito
    // - Notificar cancelación
    // - Limpiar estado temporal

    this.logger.log(`Payment Intent ${paymentIntent.id} was canceled`);
  }
}