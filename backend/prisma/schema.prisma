// prisma/schema.prisma - Schema Final Etapa 9 (Completo)

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum ProductCategory {
  FURNITURE
  CHAIRS
  TABLES
  BEDS
  STORAGE
  OUTDOOR
  DECORATIVE
  KITCHEN
  OFFICE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum OrderStatus {
  PENDING      // Orden creada, esperando pago
  PROCESSING   // Pago recibido, procesando archivos
  PAID         // Pago confirmado por Stripe
  COMPLETED    // Archivos enviados y disponibles
  CANCELLED    // Cancelada antes del pago
  REFUNDED     // Reembolso procesado
  DISPUTED     // En disputa
}

enum FileType {
  PDF
  IMAGE
  THUMBNAIL
  REVIEW_IMAGE  // 🆕 Agregado para imágenes de reviews
}

enum FileStatus {
  UPLOADING
  PROCESSING
  ACTIVE
  FAILED
  DELETED
}

enum NotificationType {
  ORDER_CREATED
  ORDER_PAID
  ORDER_COMPLETED
  ORDER_CANCELLED
  ORDER_DISPUTED
  ORDER_REFUNDED
  PRODUCT_SOLD
  DOWNLOAD_READY
  SYSTEM_NOTIFICATION
  // Payment related notifications
  PAYMENT_SETUP
  PAYMENT_SETUP_COMPLETE
  PAYMENT_METHOD_ADDED
  PAYOUT_REQUESTED
  PAYOUT_COMPLETED
  PAYOUT_FAILED
  TRANSFER_FAILED
  DISPUTE_CREATED
  REFUND_PROCESSED
  SALE_COMPLETED
  // 🆕 Review related notifications
  REVIEW_RECEIVED
  REVIEW_RESPONSE_RECEIVED
  REVIEW_FLAGGED
  REVIEW_REMOVED
 // 🆕 NUEVOS TIPOS PARA ETAPA 10
  REVIEW_HELPFUL_VOTE       // Review marcada como útil
  REVIEW_WEEKLY_DIGEST      // Digest semanal de reviews
  REVIEW_FOLLOW_UP          // Follow-up automático para reviews
  REVIEW_MILESTONE          // Hitos de reviews (10, 50, 100 reviews)
  SELLER_RATING_IMPROVED    // Rating del seller mejoró
  PRODUCT_RATING_MILESTONE  // Producto alcanzó rating milestone
  REVIEW_PENDING_REMINDER   // Recordatorio de review pendiente
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum DigestFrequency {
  DISABLED
  DAILY
  WEEKLY
  MONTHLY
}

enum FeeType {
  PLATFORM_FEE
  PAYMENT_PROCESSING
  TAX
  REGIONAL_FEE
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELLED
}

enum TransactionType {
  SALE
  PLATFORM_FEE
  STRIPE_FEE
  PAYOUT
  REFUND
  CHARGEBACK
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  ISSUED
  PAID
  OVERDUE
  CANCELLED
}

enum SellerFeeType {
  PERCENTAGE
  FIXED
  TIERED
}

// 🆕 Nuevos enums para Reviews
enum ReviewStatus {
  PENDING_MODERATION
  PUBLISHED
  FLAGGED
  REMOVED
}

enum ReviewHelpfulness {
  HELPFUL
  NOT_HELPFUL
}

// 🆕 Nuevos enums para notificaciones
enum NotificationChannel {
  EMAIL
  WEB_PUSH
  IN_APP
  SMS  // Para futuro
}

// Models
model User {
  id                     String     @id @default(cuid())
  email                  String     @unique
  password               String
  role                   UserRole   @default(BUYER)
  isBoth                 Boolean    @default(false)
  firstName              String
  lastName               String
  emailVerified          Boolean    @default(false)
  emailVerificationToken String?    @unique
  emailVerifiedAt        DateTime?
  resetPasswordToken     String?    @unique
  resetPasswordExpiresAt DateTime?
  lastLoginAt            DateTime?
  isActive               Boolean    @default(true)
  status                 UserStatus @default(ACTIVE)
  avatar                 String?
  
  // Stripe Connect Integration
  stripeConnectId        String?    @unique // Stripe Connect Account ID
  onboardingComplete     Boolean    @default(false)
  payoutsEnabled         Boolean    @default(false)
  chargesEnabled         Boolean    @default(false)
  
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt

  // Perfiles
  sellerProfile SellerProfile?
  buyerProfile  BuyerProfile?

  // Activity Relations
  products          Product[]
  orders            Order[]
  reviews           Review[]
  favorites         Favorite[]
  chatMessages      ChatMessage[]
  supportTickets    SupportTicket[]
  notifications     Notification[]
  downloads         Download[]
  blacklistedTokens BlacklistedToken[]
  uploadedFiles     File[]

  // Cart & Order Relations
  cartItems         CartItem[]
  orderItems        OrderItem[] @relation("OrderSeller")
  downloadTokens    DownloadToken[] @relation("TokenBuyer")

  // Payment Relations
  payouts           Payout[]
  transactions      Transaction[]
  invoices          Invoice[]

  // 🆕 Review Relations
  reviewResponses   ReviewResponse[]
  reviewVotes       ReviewVote[]
  reportedReviews   ReviewReport[]

  // Moderation Relations
  moderatedProducts Product[] @relation("ModeratedBy")
  moderatedReviews  Review[] @relation("ModeratedReviews") // 🆕

// 🆕 NUEVAS RELACIONES PARA ETAPA 10
  notificationPreferences NotificationPreference?
  emailLogs              EmailLog[]
  scheduledNotifications ScheduledNotification[]
  notificationAnalytics  NotificationAnalytics[]

  @@map("User")
}

model SellerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  storeName   String   @unique
  slug        String   @unique
  description String?
  website     String?
  phone       String?
  avatar      String?
  banner      String?
  rating      Float    @default(0)    // Se actualizará con las reviews
  totalSales  Int      @default(0)
  totalReviews Int     @default(0)    // 🆕 Total de reviews recibidas
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 🆕 Rating relation
  sellerRating SellerRating?

  @@map("SellerProfile")
}

model BuyerProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  avatar      String?
  phone       String?
  dateOfBirth DateTime?
  preferences Json?
  totalOrders Int       @default(0)
  totalSpent  Float     @default(0)
  totalReviews Int      @default(0)  // 🆕 Total de reviews escritas
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("BuyerProfile")
}

// Payout Management
model Payout {
  id               String       @id @default(cuid())
  sellerId         String
  seller           User         @relation(fields: [sellerId], references: [id])
  
  // Payout details
  amount           Decimal      @db.Decimal(10,2)
  currency         String       @default("USD")
  status           PayoutStatus @default(PENDING)
  
  // Stripe data
  stripePayoutId   String?      @unique
  stripeTransferId String?      @unique
  
  // Metadata
  description      String?
  failureReason    String?
  requestedAt      DateTime     @default(now())
  processedAt      DateTime?
  
  // Relations
  transactions     Transaction[]
  
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("payouts")
}

// Transaction Tracking
model Transaction {
  id               String            @id @default(cuid())
  
  // Transaction details
  type             TransactionType
  status           TransactionStatus @default(PENDING)
  amount           Decimal           @db.Decimal(10,2)
  currency         String            @default("USD")
  
  // Relationships
  sellerId         String?
  seller           User?             @relation(fields: [sellerId], references: [id])
  orderId          String?
  order            Order?            @relation(fields: [orderId], references: [id])
  payoutId         String?
  payout           Payout?           @relation(fields: [payoutId], references: [id])
  
  // Stripe references
  stripeTransactionId String?        @unique
  stripeChargeId      String?
  stripePaymentIntentId String?
  
  // Metadata
  description      String?
  metadata         Json?
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("transactions")
}

// Invoice System
model Invoice {
  id               String        @id @default(cuid())
  invoiceNumber    String        @unique // INV-YYYYMMDD-XXX
  
  // Invoice details
  sellerId         String
  seller           User          @relation(fields: [sellerId], references: [id])
  orderId          String        @unique
  order            Order         @relation(fields: [orderId], references: [id])
  
  // Amounts
  subtotal         Decimal       @db.Decimal(10,2)
  platformFee      Decimal       @db.Decimal(10,2)
  netAmount        Decimal       @db.Decimal(10,2)
  taxAmount        Decimal?      @db.Decimal(10,2)
  totalAmount      Decimal       @db.Decimal(10,2)
  
  // Status
  status           InvoiceStatus @default(PENDING)
  currency         String        @default("USD")
  
  // Dates
  issuedAt         DateTime      @default(now())
  dueAt            DateTime?
  paidAt           DateTime?
  
  // Files
  pdfUrl           String?
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("invoices")
}

// Fee Configuration
model feeConfig {
  id               String            @id @default(cuid())
  name             String
  type             FeeType
  
  // Conditions
  country          String?
  region           String?
  category         ProductCategory?
  paymentMethod    String?
  sellerTier       String?           // Seller tier-based fees
  
  // Fee structure
  isPercentage     Boolean           @default(true)
  value            Float
  minAmount        Float?
  maxAmount        Float?
  
  // Split payment configuration
  stripeFeeOffset  Float?            // Offset Stripe fees
  sellerFeeType    SellerFeeType?    @default(PERCENTAGE)
  sellerFeeValue   Float?
  
  // Priority and status
  priority         Int               @default(100)
  isActive         Boolean           @default(true)
  description      String?
  
  // Dates
  validFrom        DateTime?
  validUntil       DateTime?
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([country, isActive])
  @@index([type, isActive])
  @@index([category, isActive])
  @@map("feeConfig")
}

// Webhook Event Tracking
model WebhookEvent {
  id               String   @id @default(cuid())
  stripeEventId    String   @unique
  stripeAccountId  String?  // For Connect webhooks
  eventType        String
  data             Json
  processedAt      DateTime @default(now())
  
  @@index([stripeEventId])
  @@index([eventType])
  @@map("webhook_events")
}

model CartItem {
  id            String   @id @default(cuid())
  userId        String
  productId     String
  priceSnapshot Float
  quantity      Int      @default(1)
  addedAt       DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@map("CartItem")
}

model File {
  id       String     @id @default(cuid())
  filename String
  key      String     @unique
  url      String
  mimeType String
  size     Int
  type     FileType
  status   FileStatus @default(UPLOADING)

  width    Int?
  height   Int?
  checksum String?
  metadata Json?

  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  productPdfs    Product[]      @relation("ProductPDF")
  productImages  Product[]      @relation("ProductImages")
  productThumbs  Product[]      @relation("ProductThumbnails")
  reviewImages   ReviewImage[]  // 🆕 Relación con imágenes de reviews

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([uploadedById])
  @@index([type, status])
  @@index([key])
  @@map("File")
}

model Product {
  id          String          @id @default(cuid())
  title       String          @db.VarChar(100)
  description String          @db.VarChar(2000)
  slug        String          @unique @db.VarChar(120)
  price       Float           @default(5.00)
  category    ProductCategory
  difficulty  Difficulty
  status      ProductStatus   @default(DRAFT)

  pdfFileId        String?
  pdfFile          File?    @relation("ProductPDF", fields: [pdfFileId], references: [id])
  imageFileIds     String[] @default([])
  imageFiles       File[]   @relation("ProductImages")
  thumbnailFileIds String[] @default([])
  thumbnailFiles   File[]   @relation("ProductThumbnails")

  tags           String[] @default([])
  estimatedTime  String?  @db.VarChar(50)
  toolsRequired  String[] @default([])
  materials      String[] @default([])
  dimensions     String?  @db.VarChar(100)
  specifications Json?

  moderatedBy     String?
  moderatedAt     DateTime?
  rejectionReason String?

  sellerId  String
  seller    User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  moderator User?  @relation("ModeratedBy", fields: [moderatedBy], references: [id])

  viewCount     Int     @default(0)
  downloadCount Int     @default(0)
  favoriteCount Int     @default(0)
  featured      Boolean @default(false)
  rating        Float   @default(0)    // Promedio de ratings
  reviewCount   Int     @default(0)    // Total de reviews

  createdAt   DateTime  @default(now())
  publishedAt DateTime?
  updatedAt   DateTime  @updatedAt

  cartItems      CartItem[]
  orderItems     OrderItem[]
  downloads      Download[]
  downloadTokens DownloadToken[]
  reviews        Review[]
  favorites      Favorite[]
  ProductImage   ProductImage[]
  
  // 🆕 Rating relation
  productRating  ProductRating?

  @@index([status, createdAt])
  @@index([category, difficulty])
  @@index([category, status])
  @@index([sellerId, status])
  @@index([featured, publishedAt])
  @@index([slug])
  @@index([rating, reviewCount]) // 🆕 Índice para ordenar por rating
  @@map("Product")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("ProductImage")
}

// Order model
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  buyerId         String
  
  subtotal        Float
  subtotalAmount  Float
  platformFeeRate Float       @default(0.10)
  platformFee     Float
  totalAmount     Float
  sellerAmount    Float

  
  // Split payment data
  transferGroup   String?     // Stripe Transfer Group ID
  applicationFee  Float?      // Application fee for Connect
  
  paymentIntentId String?
  paymentStatus   String?
  
  buyerEmail      String
  billingData     Json?
  metadata        Json?
  feeBreakdown    Json?
  
  createdAt       DateTime    @default(now())
  paidAt          DateTime?
  completedAt     DateTime?
  cancelledAt     DateTime?
  updatedAt       DateTime    @updatedAt

  buyer           User         @relation(fields: [buyerId], references: [id])
  items           OrderItem[]
  downloads       Download[]
  downloadTokens  DownloadToken[]
  reviews         Review[]
  notifications   Notification[]
  status          OrderStatus  @default(PENDING)
  
  // New relations
  transactions    Transaction[]
  invoice         Invoice?

  @@index([status, createdAt])
  @@index([buyerId])
  @@index([orderNumber])
  @@index([paymentIntentId])
  @@map("Order")
}

model OrderItem {
  id           String @id @default(cuid())
  orderId      String
  productId    String
  sellerId     String
  
  productTitle String
  productSlug  String
  price        Float
  quantity     Int    @default(1)
  
  sellerName   String
  storeName    String?
  
  createdAt    DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  seller  User    @relation("OrderSeller", fields: [sellerId], references: [id])

  @@index([orderId])
  @@index([sellerId])
  @@map("OrderItem")
}

model DownloadToken {
  id              String    @id @default(cuid())
  token           String    @unique @default(cuid())
  orderId         String
  productId       String
  buyerId         String
  
  downloadLimit   Int       @default(5)
  downloadCount   Int       @default(0)
  expiresAt       DateTime
  isActive        Boolean   @default(true)
  
  createdAt       DateTime  @default(now())
  lastDownloadAt  DateTime?
  lastIpAddress   String?
  lastUserAgent   String?
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  buyer   User    @relation("TokenBuyer", fields: [buyerId], references: [id])

  @@index([token])
  @@index([orderId])
  @@index([buyerId])
  @@index([expiresAt, isActive])
  @@map("DownloadToken")
}

model Download {
  id             String    @id @default(cuid())
  downloadToken  String    @unique
  orderId        String
  productId      String
  buyerId        String
  expiresAt      DateTime
  downloadCount  Int       @default(0)
  maxDownloads   Int       @default(10)
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  lastDownloadAt DateTime?
  ipAddress      String?
  userAgent      String?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  buyer   User    @relation(fields: [buyerId], references: [id])

  @@index([downloadToken])
  @@index([buyerId])
  @@map("Download")
}

// 🆕 Modelo Review actualizado y expandido
model Review {
  id         String       @id @default(cuid())
  orderId    String
  productId  String
  buyerId    String
  sellerId   String       // 🆕 Para tracking directo del seller
  rating     Int          // 1-5 estrellas
  title      String?      // 🆕 Título opcional de la review
  comment    String       @db.Text // 🆕 Cambiado a Text para reviews más largas
  pros       String?      // 🆕 Puntos positivos
  cons       String?      // 🆕 Puntos negativos
  
  // Review metadata
  status     ReviewStatus @default(PENDING_MODERATION) // 🆕
  isVerified Boolean      @default(true)  // Verificado = comprador real
  helpfulCount Int        @default(0)     // 🆕 Contador de votos útiles
  notHelpfulCount Int     @default(0)     // 🆕 Contador de votos no útiles
  
  // Moderation
  moderatedBy String?     // 🆕
  moderatedAt DateTime?   // 🆕
  moderationReason String? // 🆕
  
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  order      Order        @relation(fields: [orderId], references: [id])
  product    Product      @relation(fields: [productId], references: [id])
  buyer      User         @relation(fields: [buyerId], references: [id])
  moderator  User?        @relation("ModeratedReviews", fields: [moderatedBy], references: [id]) // 🆕
  
  // 🆕 New relations
  images     ReviewImage[]
  response   ReviewResponse?
  votes      ReviewVote[]
  reports    ReviewReport[]

  @@unique([orderId, productId, buyerId]) // Evita reviews duplicadas
  @@index([productId, status, rating])
  @@index([sellerId, status])
  @@index([status, createdAt])
  @@map("Review")
}

// 🆕 Tabla para imágenes de reviews
model ReviewImage {
  id        String   @id @default(cuid())
  reviewId  String
  fileId    String
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
  
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  file      File     @relation(fields: [fileId], references: [id])
  
  @@index([reviewId])
  @@map("review_images")
}

// 🆕 Tabla para respuestas del seller a reviews
model ReviewResponse {
  id        String   @id @default(cuid())
  reviewId  String   @unique
  sellerId  String
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  seller    User     @relation(fields: [sellerId], references: [id])
  
  @@index([sellerId])
  @@map("review_responses")
}

// 🆕 Tabla para votos de utilidad en reviews
model ReviewVote {
  id        String            @id @default(cuid())
  reviewId  String
  userId    String
  vote      ReviewHelpfulness
  createdAt DateTime          @default(now())
  
  review    Review            @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id])
  
  @@unique([reviewId, userId]) // Un usuario solo puede votar una vez por review
  @@index([reviewId])
  @@map("review_votes")
}

// 🆕 Tabla para reportar reviews inapropiadas
model ReviewReport {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  reason    String
  details   String?
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([reviewId, resolved])
  @@index([userId])
  @@map("review_reports")
}

// 🆕 Tabla para agregación de ratings por producto
model ProductRating {
  id              String   @id @default(cuid())
  productId       String   @unique
  
  // Distribución de ratings
  totalReviews    Int      @default(0)
  averageRating   Float    @default(0)
  oneStar         Int      @default(0)
  twoStar         Int      @default(0)
  threeStar       Int      @default(0)
  fourStar        Int      @default(0)
  fiveStar        Int      @default(0)
  
  // Metadata adicional
  recommendationRate Float? @default(0) // % que lo recomienda
  
  updatedAt       DateTime @updatedAt
  
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_ratings")
}

// 🆕 Tabla para agregación de ratings por seller
model SellerRating {
  id              String        @id @default(cuid())
  sellerId        String        @unique
  
  // Ratings generales
  totalReviews    Int           @default(0)
  averageRating   Float         @default(0)
  
  // Ratings por categoría
  communicationRating Float?    @default(0)
  qualityRating      Float?     @default(0)
  valueRating        Float?     @default(0)
  shippingRating     Float?     @default(0) // Para futuro físico
  
  // Distribución
  oneStar         Int           @default(0)
  twoStar         Int           @default(0)
  threeStar       Int           @default(0)
  fourStar        Int           @default(0)
  fiveStar        Int           @default(0)
  
  updatedAt       DateTime      @updatedAt
  
  sellerProfile   SellerProfile @relation(fields: [sellerId], references: [userId], onDelete: Cascade)
  
  @@map("seller_ratings")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("Favorite")
}

model ChatRoom {
  id        String   @id @default(cuid())
  type      String
  name      String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages ChatMessage[]

  @@map("ChatRoom")
}

model ChatMessage {
  id       String   @id @default(cuid())
  roomId   String
  senderId String
  content  String
  type     String   @default("text")
  metadata Json?
  sentAt   DateTime @default(now())

  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender User     @relation(fields: [senderId], references: [id])

  @@index([roomId, sentAt])
  @@map("ChatMessage")
}

model SupportTicket {
  id           String   @id @default(cuid())
  ticketNumber String   @unique
  userId       String
  subject      String
  description  String
  status       String   @default("open")
  priority     String   @default("normal")
  assignedTo   String?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([status, priority])
  @@map("SupportTicket")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  data        Json?
  
  isRead      Boolean          @default(false)
  readAt      DateTime?
  sentAt      DateTime?
  emailSent   Boolean          @default(false)
  
  orderId     String?
  order       Order?           @relation(fields: [orderId], references: [id])
  
  createdAt   DateTime         @default(now())

// 🆕 NUEVOS CAMPOS PARA ETAPA 10
  priority    NotificationPriority @default(NORMAL)
  channel     NotificationChannel? // Canal principal usado
  groupKey    String?          // Para agrupar notificaciones similares
  expiresAt   DateTime?        // Para notificaciones temporales
  
  // 🆕 Engagement tracking
  clickedAt   DateTime?        // Cuando hizo click en la notificación
  clickCount  Int              @default(0)

// 🆕 New relations
  emailLog    EmailLog?
  analytics   NotificationAnalytics[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([type, createdAt])
  @@index([orderId])
  @@index([groupKey, createdAt]) // 🆕 Para agrupar notificaciones
  @@index([expiresAt])           // 🆕 Para cleanup de notificaciones expiradas
  @@map("Notification")
}

model Analytics {
  id        String   @id @default(cuid())
  eventType String
  userId    String?
  productId String?
  sessionId String?
  eventData Json
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([eventType, createdAt])
  @@index([userId])
  @@index([productId])
  @@map("Analytics")
}

model BlacklistedToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([userId])
  @@map("BlacklistedToken")
}
// 🆕 NUEVA TABLA: Preferencias de Notificación
model NotificationPreference {
  id                    String            @id @default(cuid())
  userId                String            @unique
  
  // Configuraciones generales
  emailEnabled          Boolean           @default(true)
  webPushEnabled        Boolean           @default(true)
  inAppEnabled          Boolean           @default(true)
  
  // Preferencias por tipo de notificación
  orderNotifications    Boolean           @default(true)
  paymentNotifications  Boolean           @default(true)
  reviewNotifications   Boolean           @default(true)
  marketingEmails       Boolean           @default(false)
  systemNotifications   Boolean           @default(true)
  
  // 🆕 Configuraciones específicas de reviews
  reviewReceived        Boolean           @default(true)   // Cuando recibe review
  reviewResponses       Boolean           @default(true)   // Cuando responden a su review
  reviewHelpfulVotes    Boolean           @default(true)   // Cuando marcan su review como útil
  reviewMilestones      Boolean           @default(true)   // Hitos de reviews
  reviewReminders       Boolean           @default(true)   // Recordatorios de review pendiente
  
  // 🆕 Configuraciones de digest
  digestFrequency       DigestFrequency   @default(WEEKLY)
  digestDay             Int?              @default(1) // 1=Monday, 7=Sunday
  digestTime            String?           @default("09:00") // HH:MM format
  
  // 🆕 Configuraciones avanzadas
  quietHoursEnabled     Boolean           @default(false)
  quietHoursStart       String?           @default("22:00") // HH:MM format
  quietHoursEnd         String?           @default("08:00") // HH:MM format
  timezone              String?           @default("UTC")
  
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_preferences")
}

// 🆕 NUEVA TABLA: Templates de Email Personalizados
model EmailTemplate {
  id                    String                   @id @default(cuid())
  name                  String                   @unique // review-received, review-digest, etc.
  type                  NotificationType
  
  // Template content
  subject               String
  htmlContent           String                   @db.Text
  textContent           String?                  @db.Text
  
  // 🆕 Template variables
  variables             Json?                    // Variables disponibles en el template
  
  // Metadata
  isActive              Boolean                  @default(true)
  isDefault             Boolean                  @default(false)
  language              String                   @default("en")
  version               Int                      @default(1)
  
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  
  // Relations
  emailLogs             EmailLog[]
  
  @@index([type, language, isActive])
  @@map("email_templates")
}

// 🆕 NUEVA TABLA: Log de Emails Enviados
model EmailLog {
  id                    String                   @id @default(cuid())
  userId                String
  templateId            String?
  notificationId        String?                  @unique
  
  // Email details
  toEmail               String
  subject               String
  status                String                   @default("pending") // pending, sent, delivered, failed, bounced, opened, clicked
  
  // 🆕 Engagement tracking
  sentAt                DateTime?
  deliveredAt           DateTime?
  openedAt              DateTime?
  firstOpenedAt         DateTime?
  clickedAt             DateTime?
  firstClickedAt        DateTime?
  openCount             Int                      @default(0)
  clickCount            Int                      @default(0)
  
  // Error handling
  errorMessage          String?
  providerResponse      Json?
  
  // Tracking
  messageId             String?                  // Provider message ID
  trackingPixelId       String?                  @unique
  
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  
  // Relations
  user                  User                     @relation(fields: [userId], references: [id])
  template              EmailTemplate?           @relation(fields: [templateId], references: [id])
  notification          Notification?            @relation(fields: [notificationId], references: [id])
  
  @@index([userId, status])
  @@index([status, sentAt])
  @@index([templateId])
  @@map("email_logs")
}

// 🆕 NUEVA TABLA: Notificaciones Programadas
model ScheduledNotification {
  id                    String                   @id @default(cuid())
  userId                String
  type                  NotificationType
  
  // Scheduling
  scheduledFor          DateTime
  status                String                   @default("pending") // pending, sent, failed, cancelled
  
  // Content
  title                 String
  message               String
  data                  Json?
  
  // Retry mechanism
  attempts              Int                      @default(0)
  maxAttempts           Int                      @default(3)
  lastAttemptAt         DateTime?
  nextAttemptAt         DateTime?
  
  // Relations
  orderId               String?
  productId             String?
  reviewId              String?
  
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  processedAt           DateTime?
  
  user                  User                     @relation(fields: [userId], references: [id])
  
  @@index([scheduledFor, status])
  @@index([userId, type])
  @@index([status, nextAttemptAt])
  @@map("scheduled_notifications")
}

// 🆕 NUEVA TABLA: Analytics de Notificaciones
model NotificationAnalytics {
  id                    String                   @id @default(cuid())
  userId                String
  notificationId        String?
  type                  NotificationType
  channel               NotificationChannel
  
  // Engagement metrics
  sent                  Boolean                  @default(false)
  delivered             Boolean                  @default(false)
  read                  Boolean                  @default(false)
  clicked               Boolean                  @default(false)
  
  // Timing
  sentAt                DateTime?
  deliveredAt           DateTime?
  readAt                DateTime?
  clickedAt             DateTime?
  
  // Device/Platform info
  deviceType            String?                  // mobile, desktop, tablet
  platform              String?                  // ios, android, web
  userAgent             String?
  
  createdAt             DateTime                 @default(now())
  
  user                  User                     @relation(fields: [userId], references: [id])
  notification          Notification?            @relation(fields: [notificationId], references: [id])
  
  @@index([userId, type, sentAt])
  @@index([type, channel, sentAt])
  @@index([notificationId])
  @@map("notification_analytics")
}
