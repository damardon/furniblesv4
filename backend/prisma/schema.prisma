// prisma/schema.prisma - Schema Corregido para SQLite

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum ProductCategory {
  FURNITURE
  CHAIRS
  TABLES
  BEDS
  STORAGE
  OUTDOOR
  DECORATIVE
  KITCHEN
  OFFICE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  COMPLETED
  CANCELLED
  REFUNDED
  DISPUTED
}

enum FileType {
  PDF
  IMAGE
  THUMBNAIL
  REVIEW_IMAGE
}

enum FileStatus {
  UPLOADING
  PROCESSING
  ACTIVE
  FAILED
  DELETED
}

enum NotificationType {
  ORDER_CREATED
  ORDER_PAID
  ORDER_COMPLETED
  ORDER_CANCELLED
  ORDER_DISPUTED
  ORDER_REFUNDED
  PRODUCT_SOLD
  DOWNLOAD_READY
  SYSTEM_NOTIFICATION
  PAYMENT_SETUP
  PAYMENT_SETUP_COMPLETE
  PAYMENT_METHOD_ADDED
  PAYOUT_REQUESTED
  PAYOUT_COMPLETED
  PAYOUT_FAILED
  TRANSFER_FAILED
  DISPUTE_CREATED
  REFUND_PROCESSED
  SALE_COMPLETED
  REVIEW_RECEIVED
  REVIEW_RESPONSE_RECEIVED
  REVIEW_FLAGGED
  REVIEW_REMOVED
  REVIEW_HELPFUL_VOTE
  REVIEW_WEEKLY_DIGEST
  REVIEW_FOLLOW_UP
  REVIEW_MILESTONE
  SELLER_RATING_IMPROVED
  PRODUCT_RATING_MILESTONE
  REVIEW_PENDING_REMINDER
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum DigestFrequency {
  DISABLED
  DAILY
  WEEKLY
  MONTHLY
}

enum FeeType {
  PLATFORM_FEE
  PAYMENT_PROCESSING
  TAX
  REGIONAL_FEE
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELLED
}

enum TransactionType {
  SALE
  PLATFORM_FEE
  STRIPE_FEE
  PAYOUT
  REFUND
  CHARGEBACK
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum InvoiceStatus {
  PENDING
  ISSUED
  PAID
  OVERDUE
  CANCELLED
}

enum SellerFeeType {
  PERCENTAGE
  FIXED
  TIERED
}

enum ReviewStatus {
  PENDING_MODERATION
  PUBLISHED
  FLAGGED
  REMOVED
}

enum ReviewHelpfulness {
  HELPFUL
  NOT_HELPFUL
}

enum NotificationChannel {
  EMAIL
  WEB_PUSH
  IN_APP
  SMS
}

// Models
model User {
  id                     String     @id @default(cuid())
  email                  String     @unique
  password               String
  role                   UserRole   @default(BUYER)
  isBoth                 Boolean    @default(false)
  firstName              String
  lastName               String
  emailVerified          Boolean    @default(false)
  emailVerificationToken String?    @unique
  emailVerifiedAt        DateTime?
  resetPasswordToken     String?    @unique
  resetPasswordExpiresAt DateTime?
  lastLoginAt            DateTime?
  isActive               Boolean    @default(true)
  status                 UserStatus @default(ACTIVE)
  avatar                 String?

  // Stripe Connect Integration
  stripeConnectId    String? @unique
  onboardingComplete Boolean @default(false)
  payoutsEnabled     Boolean @default(false)
  chargesEnabled     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - corregidas para many-to-many
  sellerProfile SellerProfile?
  buyerProfile  BuyerProfile?

  // Product relations
  products          Product[] @relation("UserProducts")
  moderatedProducts Product[] @relation("ModeratedProducts")
  
  // Order relations
  orders            Order[]
  reviews           Review[]
  
  // Other relations
  favorites         Favorite[]
  chatMessages      ChatMessage[]
  supportTickets    SupportTicket[]
  notifications     Notification[]
  downloads         Download[]
  blacklistedTokens BlacklistedToken[]
  uploadedFiles     File[]             @relation("UserFiles")
  cartItems         CartItem[]
  orderItems        OrderItem[]        @relation("OrderSeller")
  downloadTokens    DownloadToken[]    @relation("TokenBuyer")
  payouts           Payout[]
  transactions      Transaction[]
  invoices          Invoice[]
  reviewResponses   ReviewResponse[]
  reviewVotes       ReviewVote[]
  reportedReviews   ReviewReport[]
  moderatedReviews  Review[]           @relation("ModeratedReviews")
  
  // Notification relations
  notificationPreferences NotificationPreference?
  emailLogs               EmailLog[]
  scheduledNotifications  ScheduledNotification[]
  notificationAnalytics   NotificationAnalytics[]

  @@map("user")
}

model SellerProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  storeName    String   @unique
  slug         String   @unique
  description  String?
  website      String?
  phone        String?
  avatar       String?
  banner       String?
  rating       Float    @default(0)
  totalSales   Int      @default(0)
  totalReviews Int      @default(0)
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sellerRating SellerRating?

  @@map("SellerProfile")
}

model BuyerProfile {
  id           String    @id @default(cuid())
  userId       String    @unique
  avatar       String?
  phone        String?
  dateOfBirth  DateTime?
  preferences  Json?
  totalOrders  Int       @default(0)
  totalSpent   Float     @default(0)
  totalReviews Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("BuyerProfile")
}

model Payout {
  id       String @id @default(cuid())
  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id])

  amount   Float
  currency String       @default("USD")
  status   PayoutStatus @default(PENDING)

  stripePayoutId   String? @unique
  stripeTransferId String? @unique

  description   String?
  failureReason String?
  requestedAt   DateTime  @default(now())
  processedAt   DateTime?

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payouts")
}

model Transaction {
  id String @id @default(cuid())

  type     TransactionType
  status   TransactionStatus @default(PENDING)
  amount   Float
  currency String            @default("USD")

  sellerId String?
  seller   User?   @relation(fields: [sellerId], references: [id])
  orderId  String?
  order    Order?  @relation(fields: [orderId], references: [id])
  payoutId String?
  payout   Payout? @relation(fields: [payoutId], references: [id])

  stripeTransactionId   String? @unique
  stripeChargeId        String?
  stripePaymentIntentId String?

  description String?
  metadata    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}

model Invoice {
  id            String @id @default(cuid())
  invoiceNumber String @unique

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id])
  orderId  String @unique
  order    Order  @relation(fields: [orderId], references: [id])

  subtotal    Float
  platformFee Float
  netAmount   Float
  taxAmount   Float?
  totalAmount Float

  status   InvoiceStatus @default(PENDING)
  currency String        @default("USD")

  issuedAt DateTime  @default(now())
  dueAt    DateTime?
  paidAt   DateTime?

  pdfUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

model feeConfig {
  id   String  @id @default(cuid())
  name String
  type FeeType

  country       String?
  region        String?
  category      ProductCategory?
  paymentMethod String?
  sellerTier    String?

  isPercentage Boolean @default(true)
  value        Float
  minAmount    Float?
  maxAmount    Float?

  stripeFeeOffset Float?
  sellerFeeType   SellerFeeType? @default(PERCENTAGE)
  sellerFeeValue  Float?

  priority    Int     @default(100)
  isActive    Boolean @default(true)
  description String?

  validFrom  DateTime?
  validUntil DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([country, isActive])
  @@index([type, isActive])
  @@index([category, isActive])
  @@map("feeConfig")
}

model WebhookEvent {
  id              String   @id @default(cuid())
  stripeEventId   String   @unique
  stripeAccountId String?
  eventType       String
  data            Json
  processedAt     DateTime @default(now())

  @@index([stripeEventId])
  @@index([eventType])
  @@map("webhook_events")
}

model CartItem {
  id            String   @id @default(cuid())
  userId        String
  productId     String
  priceSnapshot Float
  quantity      Int      @default(1)
  addedAt       DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@map("CartItem")
}

model File {
  id       String     @id @default(cuid())
  filename String
  key      String     @unique
  url      String
  mimeType String
  size     Int
  type     FileType
  status   FileStatus @default(UPLOADING)

  width    Int?
  height   Int?
  checksum String?
  metadata Json?

  uploadedById String
  uploadedBy   User   @relation("UserFiles", fields: [uploadedById], references: [id])

  // Relations - removed problematic relations
  reviewImages  ReviewImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([uploadedById])
  @@index([type, status])
  @@index([key])
  @@map("File")
}

model Product {
  id          String          @id @default(cuid())
  title       String
  description String
  slug        String          @unique
  price       Float           @default(5.00)
  category    ProductCategory
  difficulty  Difficulty
  status      ProductStatus   @default(DRAFT)

  // Simplified file relationships - using JSON for file IDs
  pdfFileId        String? // Single PDF file ID
  imageFileIds     String  @default("[]") // JSON array of image file IDs
  thumbnailFileIds String  @default("[]") // JSON array of thumbnail file IDs

  tags           String  @default("[]") // JSON array
  estimatedTime  String?
  toolsRequired  String  @default("[]") // JSON array
  materials      String  @default("[]") // JSON array
  dimensions     String?
  specifications Json?

  moderatedBy     String?
  moderatedAt     DateTime?
  rejectionReason String?

  sellerId  String
  seller    User   @relation("UserProducts", fields: [sellerId], references: [id], onDelete: Cascade)
  moderator User?  @relation("ModeratedProducts", fields: [moderatedBy], references: [id])

  viewCount     Int     @default(0)
  downloadCount Int     @default(0)
  favoriteCount Int     @default(0)
  featured      Boolean @default(false)
  rating        Float   @default(0)
  reviewCount   Int     @default(0)

  createdAt   DateTime  @default(now())
  publishedAt DateTime?
  updatedAt   DateTime  @updatedAt

  // Relations
  cartItems      CartItem[]
  orderItems     OrderItem[]
  downloads      Download[]
  downloadTokens DownloadToken[]
  reviews        Review[]
  favorites      Favorite[]
  productImages  ProductImage[]
  productRating  ProductRating?

  @@index([status, createdAt])
  @@index([category, difficulty])
  @@index([category, status])
  @@index([sellerId, status])
  @@index([featured, publishedAt])
  @@index([slug])
  @@index([rating, reviewCount])
  @@map("Products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("ProductImage")
}

model Order {
  id          String @id @default(cuid())
  orderNumber String @unique
  buyerId     String

  subtotal        Float
  subtotalAmount  Float
  platformFeeRate Float @default(0.10)
  platformFee     Float
  totalAmount     Float
  sellerAmount    Float

  transferGroup  String?
  applicationFee Float?

  paymentIntentId String?
  paymentStatus   String?

  buyerEmail   String
  feeBreakdown Json?
  billingData  Json?
  metadata     Json?

  status OrderStatus @default(PENDING)

  createdAt   DateTime  @default(now())
  paidAt      DateTime?
  completedAt DateTime?
  cancelledAt DateTime?
  updatedAt   DateTime  @updatedAt

  buyer          User            @relation(fields: [buyerId], references: [id])
  items          OrderItem[]
  downloads      Download[]
  downloadTokens DownloadToken[]
  reviews        Review[]
  notifications  Notification[]
  transactions   Transaction[]
  invoice        Invoice?

  @@index([status, createdAt])
  @@index([buyerId])
  @@index([orderNumber])
  @@index([paymentIntentId])
  @@map("Order")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  sellerId  String

  productTitle String
  productSlug  String
  price        Float
  quantity     Int    @default(1)

  sellerName String
  storeName  String?

  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  seller  User    @relation("OrderSeller", fields: [sellerId], references: [id])

  @@index([orderId])
  @@index([sellerId])
  @@map("OrderItem")
}

model DownloadToken {
  id        String @id @default(cuid())
  token     String @unique @default(cuid())
  orderId   String
  productId String
  buyerId   String

  downloadLimit Int      @default(5)
  downloadCount Int      @default(0)
  expiresAt     DateTime
  isActive      Boolean  @default(true)

  createdAt      DateTime  @default(now())
  lastDownloadAt DateTime?
  lastIpAddress  String?
  lastUserAgent  String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  buyer   User    @relation("TokenBuyer", fields: [buyerId], references: [id])

  @@index([token])
  @@index([orderId])
  @@index([buyerId])
  @@index([expiresAt, isActive])
  @@map("DownloadToken")
}

model Download {
  id             String    @id @default(cuid())
  downloadToken  String    @unique
  orderId        String
  productId      String
  buyerId        String
  expiresAt      DateTime
  downloadCount  Int       @default(0)
  maxDownloads   Int       @default(10)
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  lastDownloadAt DateTime?
  ipAddress      String?
  userAgent      String?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  buyer   User    @relation(fields: [buyerId], references: [id])

  @@index([downloadToken])
  @@index([buyerId])
  @@map("Download")
}

model Review {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  buyerId   String
  sellerId  String
  rating    Int
  title     String?
  comment   String
  pros      String?
  cons      String?

  status          ReviewStatus @default(PENDING_MODERATION)
  isVerified      Boolean      @default(true)
  helpfulCount    Int          @default(0)
  notHelpfulCount Int          @default(0)

  moderatedBy      String?
  moderatedAt      DateTime?
  moderationReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  buyer     User    @relation(fields: [buyerId], references: [id])
  moderator User?   @relation("ModeratedReviews", fields: [moderatedBy], references: [id])

  images   ReviewImage[]
  response ReviewResponse?
  votes    ReviewVote[]
  reports  ReviewReport[]

  @@unique([orderId, productId, buyerId])
  @@index([productId, status, rating])
  @@index([sellerId, status])
  @@index([status, createdAt])
  @@map("Review")
}

model ReviewImage {
  id        String   @id @default(cuid())
  reviewId  String
  fileId    String
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  file   File   @relation(fields: [fileId], references: [id])

  @@index([reviewId])
  @@map("review_images")
}

model ReviewResponse {
  id        String   @id @default(cuid())
  reviewId  String   @unique
  sellerId  String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  seller User   @relation(fields: [sellerId], references: [id])

  @@index([sellerId])
  @@map("review_responses")
}

model ReviewVote {
  id        String            @id @default(cuid())
  reviewId  String
  userId    String
  vote      ReviewHelpfulness
  createdAt DateTime          @default(now())

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@unique([reviewId, userId])
  @@index([reviewId])
  @@map("review_votes")
}

model ReviewReport {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  reason    String
  details   String?
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@index([reviewId, resolved])
  @@index([userId])
  @@map("review_reports")
}

model ProductRating {
  id        String @id @default(cuid())
  productId String @unique

  totalReviews  Int   @default(0)
  averageRating Float @default(0)
  oneStar       Int   @default(0)
  twoStar       Int   @default(0)
  threeStar     Int   @default(0)
  fourStar      Int   @default(0)
  fiveStar      Int   @default(0)

  recommendationRate Float? @default(0)

  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_ratings")
}

model SellerRating {
  id       String @id @default(cuid())
  sellerId String @unique

  totalReviews  Int   @default(0)
  averageRating Float @default(0)

  communicationRating Float? @default(0)
  qualityRating       Float? @default(0)
  valueRating         Float? @default(0)
  shippingRating      Float? @default(0)

  oneStar   Int @default(0)
  twoStar   Int @default(0)
  threeStar Int @default(0)
  fourStar  Int @default(0)
  fiveStar  Int @default(0)

  updatedAt DateTime @updatedAt

  sellerProfile SellerProfile @relation(fields: [sellerId], references: [userId], onDelete: Cascade)

  @@map("seller_ratings")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("Favorite")
}

model ChatRoom {
  id        String   @id @default(cuid())
  type      String
  name      String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages ChatMessage[]

  @@map("ChatRoom")
}

model ChatMessage {
  id       String   @id @default(cuid())
  roomId   String
  senderId String
  content  String
  type     String   @default("text")
  metadata Json?
  sentAt   DateTime @default(now())

  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender User     @relation(fields: [senderId], references: [id])

  @@index([roomId, sentAt])
  @@map("ChatMessage")
}

model SupportTicket {
  id           String   @id @default(cuid())
  ticketNumber String   @unique
  userId       String
  subject      String
  description  String
  status       String   @default("open")
  priority     String   @default("normal")
  assignedTo   String?
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([status, priority])
  @@map("SupportTicket")
}

model Notification {
  id      String           @id @default(cuid())
  userId  String
  type    NotificationType
  title   String
  message String
  data    Json?

  isRead    Boolean   @default(false)
  readAt    DateTime?
  sentAt    DateTime?
  emailSent Boolean   @default(false)

  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())

  priority  NotificationPriority @default(NORMAL)
  channel   NotificationChannel?
  groupKey  String?
  expiresAt DateTime?

  clickedAt  DateTime?
  clickCount Int       @default(0)

  emailLog  EmailLog?
  analytics NotificationAnalytics[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([type, createdAt])
  @@index([orderId])
  @@index([groupKey, createdAt])
  @@index([expiresAt])
  @@map("Notification")
}

model Analytics {
  id        String   @id @default(cuid())
  eventType String
  userId    String?
  productId String?
  sessionId String?
  eventData Json
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([eventType, createdAt])
  @@index([userId])
  @@index([productId])
  @@map("Analytics")
}

model BlacklistedToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([userId])
  @@map("BlacklistedToken")
}

model NotificationPreference {
  id     String @id @default(cuid())
  userId String @unique

  emailEnabled   Boolean @default(true)
  webPushEnabled Boolean @default(true)
  inAppEnabled   Boolean @default(true)

  orderNotifications   Boolean @default(true)
  paymentNotifications Boolean @default(true)
  reviewNotifications  Boolean @default(true)
  marketingEmails      Boolean @default(false)
  systemNotifications  Boolean @default(true)

  reviewReceived     Boolean @default(true)
  reviewResponses    Boolean @default(true)
  reviewHelpfulVotes Boolean @default(true)
  reviewMilestones   Boolean @default(true)
  reviewReminders    Boolean @default(true)

  digestFrequency DigestFrequency @default(WEEKLY)
  digestDay       Int?            @default(1)
  digestTime      String?         @default("09:00")

  quietHoursEnabled Boolean @default(false)
  quietHoursStart   String? @default("22:00")
  quietHoursEnd     String? @default("08:00")
  timezone          String? @default("UTC")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model EmailTemplate {
  id   String           @id @default(cuid())
  name String           @unique
  type NotificationType

  subject     String
  htmlContent String
  textContent String?

  variables Json?

  isActive  Boolean @default(true)
  isDefault Boolean @default(false)
  language  String  @default("en")
  version   Int     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailLogs EmailLog[]

  @@index([type, language, isActive])
  @@map("email_templates")
}

model EmailLog {
  id             String  @id @default(cuid())
  userId         String
  templateId     String?
  notificationId String? @unique

  toEmail String
  subject String
  status  String @default("pending")

  sentAt         DateTime?
  deliveredAt    DateTime?
  openedAt       DateTime?
  firstOpenedAt  DateTime?
  clickedAt      DateTime?
  firstClickedAt DateTime?
  openCount      Int       @default(0)
  clickCount     Int       @default(0)

  errorMessage     String?
  providerResponse Json?

  messageId       String?
  trackingPixelId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id])
  template     EmailTemplate? @relation(fields: [templateId], references: [id])
  notification Notification?  @relation(fields: [notificationId], references: [id])

  @@index([userId, status])
  @@index([status, sentAt])
  @@index([templateId])
  @@map("email_logs")
}

model ScheduledNotification {
  id     String           @id @default(cuid())
  userId String
  type   NotificationType

  scheduledFor DateTime
  status       String   @default("pending")

  title   String
  message String
  data    Json?

  attempts      Int       @default(0)
  maxAttempts   Int       @default(3)
  lastAttemptAt DateTime?
  nextAttemptAt DateTime?

  orderId   String?
  productId String?
  reviewId  String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  processedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([scheduledFor, status])
  @@index([userId, type])
  @@index([status, nextAttemptAt])
  @@map("scheduled_notifications")
}

model NotificationAnalytics {
  id             String              @id @default(cuid())
  userId         String
  notificationId String?
  type           NotificationType
  channel        NotificationChannel

  sent      Boolean @default(false)
  delivered Boolean @default(false)
  read      Boolean @default(false)
  clicked   Boolean @default(false)

  sentAt      DateTime?
  deliveredAt DateTime?
  readAt      DateTime?
  clickedAt   DateTime?

  deviceType String?
  platform   String?
  userAgent  String?

  createdAt DateTime @default(now())

  user         User          @relation(fields: [userId], references: [id])
  notification Notification? @relation(fields: [notificationId], references: [id])

  @@index([userId, type, sentAt])
  @@index([type, channel, sentAt])
  @@index([notificationId])
  @@map("notification_analytics")
}