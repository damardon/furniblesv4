# Database
DATABASE_URL="postgresql://postgres:password@localhost:5432/furnibles"

# Redis
REDIS_URL="redis://localhost:6379"

# JWT
JWT_SECRET="your-super-secret-jwt-key-change-in-production"
JWT_EXPIRES_IN="24h"

# Stripe
STRIPE_SECRET_KEY="sk_test_your_stripe_secret_key"
STRIPE_PUBLISHABLE_KEY="pk_test_your_stripe_publishable_key"
STRIPE_WEBHOOK_SECRET="whsec_your_webhook_secret"

# Email Service (SendGrid)
EMAIL_SERVICE="sendgrid"
EMAIL_API_KEY="SG.your_sendgrid_api_key"
EMAIL_FROM="noreply@furnibles.com"
EMAIL_FROM_NAME="Furnibles"

# File Storage
FILE_STORAGE="local" # or "s3"
AWS_ACCESS_KEY_ID="your_aws_access_key"
AWS_SECRET_ACCESS_KEY="your_aws_secret_key"
AWS_REGION="us-east-1"
AWS_S3_BUCKET="furnibles-files"

# WhatsApp Business API
WHATSAPP_TOKEN="your_whatsapp_token"
WHATSAPP_PHONE_ID="your_phone_id"

# App Configuration
NODE_ENV="development"
PORT="3001"
API_PREFIX="api"
FRONTEND_URL="http://localhost:3000"

# Rate Limiting
THROTTLE_TTL="60"
THROTTLE_LIMIT="100"

# Upload Limits
MAX_FILE_SIZE="10485760" # 10MB in bytes
MAX_FILES_PER_UPLOAD="6"

# Security
BCRYPT_ROUNDS="12"
CORS_ORIGIN="http://localhost:3000"

# Logging
LOG_LEVEL="info"

# Configuración de archivos (para futuro módulo de files)
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=10485760  # 10MB
ALLOWED_FILE_TYPES=pdf,jpg,jpeg,png,webp

# Configuración de productos
MAX_PRODUCTS_PER_SELLER=50
DEFAULT_PRODUCT_PRICE=5.00
PRODUCT_MODERATION_ENABLED=true

# CDN/Storage (para cuando se implemente)
AWS_BUCKET=furnibles-files
AWS_REGION=us-east-1
CDN_URL=https://cdn.furnibles.com

# Email Configuration (SMTP)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password
SMTP_FROM=noreply@furnibles.com

# Frontend URLs
FRONTEND_URL=http://localhost:3000
API_URL=https://probable-barnacle-65wp9jg5qwxc5w6-3002.app.github.dev

# File Storage
STORAGE_PATH=./storage
MAX_FILE_SIZE=10485760
MAX_FILES_PER_PRODUCT=5

# Download Configuration
DOWNLOAD_TOKEN_EXPIRY_DAYS=30
DEFAULT_DOWNLOAD_LIMIT=5

# Order Configuration
ORDER_CLEANUP_HOURS=1
CART_CLEANUP_DAYS=30

# WebSocket Configuration
WEBSOCKET_CORS_ORIGIN=http://localhost:3000

# Fee Configuration
DEFAULT_PLATFORM_FEE=0.10
*/        await this.prisma.order.update({
          where: { id: orderId },
          data: {
            paymentIntentId: session.payment_intent as string,
            paymentStatus: 'completed'
          }
        });
      }

      this.logger.log(`Checkout completed for session: ${session.id}`);
    } catch (error) {
      this.logger.error(`Error processing checkout completion: ${error.message}`);
    }
  }

  /**
   * Manejar disputa creada
   */
  private async handleDisputeCreated(dispute: Stripe.Dispute): Promise<void> {
    try {
      const paymentIntentId = dispute.payment_intent as string;
      
      const order = await this.prisma.order.findFirst({
        where: { paymentIntentId }
      });

      if (order) {
        await this.prisma.order.update({
          where: { id: order.id },
          data: {
            status: 'DISPUTED',
            metadata: {
              ...order.metadata,
              disputeId: dispute.id,
              disputeReason: dispute.reason
            }
          }
        });
      }

      this.logger.log(`Dispute created for PI: ${paymentIntentId}`);
    } catch (error) {
      this.logger.error(`Error processing dispute: ${error.message}`);
    }
  }
}